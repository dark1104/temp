import ipaddress import json import random import time import logging import argparse import yaml import os import csv from collections import defaultdict from datetime import datetime, timedelta from typing import Dict, List, Any import numpy as np from scipy import stats from faker import Faker

Configure logging

logging.basicConfig( level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) logger = logging.getLogger('enhanced-ipfix-simulator')

fake = Faker()

def random_mac(): return ':'.join([f'{random.randint(0, 255):02x}' for _ in range(6)])

(TrafficProfile and AnomalyGenerator remain unchanged)

Skipping their code here for brevity - they are unchanged.

class CSVFlowWriter: def init(self, output_dir: str = "flows"): self.output_dir = output_dir os.makedirs(output_dir, exist_ok=True) self.files = defaultdict(lambda: None) self.writers = {}

def _get_writer(self, filename: str, fieldnames: list):
    if self.files[filename] is None:
        path = os.path.join(self.output_dir, filename)
        self.files[filename] = open(path, 'w', newline='')
        writer = csv.DictWriter(self.files[filename], fieldnames=fieldnames)
        writer.writeheader()
        self.writers[filename] = writer
    return self.writers[filename]

def write_flows(self, flows: list):
    for flow in flows:
        filename = "normal_flows.csv"
        if flow.get("anomaly"):
            filename = f"{flow['anomaly_type']}.csv"

        writer = self._get_writer(filename, flow.keys())
        writer.writerow(flow)

def close(self):
    for file in self.files.values():
        if file:
            file.close()

class IPFIXSimulator: def init(self, config_file: str): with open(config_file, 'r') as f: self.config = yaml.safe_load(f)

self.csv_writer = CSVFlowWriter()

    self.profiles = [TrafficProfile(p) for p in self.config['traffic_profiles']]
    self.anomaly_generator = AnomalyGenerator(self.config.get('anomalies', {}))

    self.simulation_speed = self.config.get('simulation_speed', 1.0)
    self.start_time = datetime.fromisoformat(
        self.config.get('start_time', datetime.now().isoformat())
    )
    self.end_time = datetime.fromisoformat(
        self.config.get('end_time', (datetime.now() + timedelta(hours=1)).isoformat())
    )
    self.current_time = self.start_time
    self.running = False

def start(self):
    logger.info(f"Starting IPFIX simulation from {self.start_time} to {self.end_time}")
    logger.info("Exporting to CSV files by anomaly type")
    self.running = True
    self.run_simulation()

def stop(self):
    self.running = False
    self.csv_writer.close()
    logger.info("Simulation stopped")

def run_simulation(self):
    while self.running and self.current_time <= self.end_time:
        active_anomalies = self.anomaly_generator.get_active_anomalies(self.current_time)
        if active_anomalies:
            logger.info(f"Active anomalies at {self.current_time}: {len(active_anomalies)}")
            for anomaly in active_anomalies:
                logger.info(f"  - {anomaly['type']}")

        all_flows = []
        for profile in self.profiles:
            flow_rate = profile.get_flow_rate(self.current_time)
            num_flows = max(1, int(flow_rate / 60))

            profile_flows = [profile.generate_flow(int(self.current_time.timestamp())) for _ in range(num_flows)]
            all_flows.extend(profile_flows)

        all_flows = self.anomaly_generator.apply_anomalies(all_flows, active_anomalies)

        self.csv_writer.write_flows(all_flows)

        self.current_time += timedelta(seconds=1 * self.simulation_speed)

        if self.current_time.second % 10 == 0:
            progress = (self.current_time - self.start_time) / (self.end_time - self.start_time) * 100
            logger.info(f"Simulation progress: {progress:.1f}% - Current time: {self.current_time}")
            logger.info(f"Generated {len(all_flows)} flows in this iteration")

        time.sleep(0.1 / self.simulation_speed)

def main(): parser = argparse.ArgumentParser(description='Enhanced IPFIX Traffic Simulator') parser.add_argument('--config', '-c', required=True, help='Configuration file path') parser.add_argument('--log-level', '-l', default='INFO', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'], help='Logging level') args = parser.parse_args()

logging.getLogger().setLevel(getattr(logging, args.log_level))

simulator = IPFIXSimulator(args.config)

try:
    simulator.start()
except KeyboardInterrupt:
    logger.info("Simulation interrupted")
    simulator.stop()
except Exception as e:
    logger.error(f"Simulation error: {e}", exc_info=True)
    simulator.stop()

if name == "main": main()
